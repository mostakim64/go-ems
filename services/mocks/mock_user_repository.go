// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user.go
//
// Generated by this command:
//
//	mockgen -source=domain/user.go -destination=services/mocks/mock_user_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/vivasoft-ltd/go-ems/models"
	types "github.com/vivasoft-ltd/go-ems/types"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(req *types.CreateUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), req)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), id)
}

// ListAttendees mocks base method.
func (m *MockUserService) ListAttendees(user types.CurrentUser) ([]types.AttendeeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttendees", user)
	ret0, _ := ret[0].([]types.AttendeeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttendees indicates an expected call of ListAttendees.
func (mr *MockUserServiceMockRecorder) ListAttendees(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttendees", reflect.TypeOf((*MockUserService)(nil).ListAttendees), user)
}

// ListUsers mocks base method.
func (m *MockUserService) ListUsers(req types.ListUserReq) (*types.PaginatedUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", req)
	ret0, _ := ret[0].(*types.PaginatedUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserServiceMockRecorder) ListUsers(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserService)(nil).ListUsers), req)
}

// ReadPermissionsByRole mocks base method.
func (m *MockUserService) ReadPermissionsByRole(roleID int) ([]*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPermissionsByRole", roleID)
	ret0, _ := ret[0].([]*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPermissionsByRole indicates an expected call of ReadPermissionsByRole.
func (mr *MockUserServiceMockRecorder) ReadPermissionsByRole(roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPermissionsByRole", reflect.TypeOf((*MockUserService)(nil).ReadPermissionsByRole), roleID)
}

// ReadUser mocks base method.
func (m *MockUserService) ReadUser(id int, fromCache bool) (*types.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", id, fromCache)
	ret0, _ := ret[0].(*types.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser.
func (mr *MockUserServiceMockRecorder) ReadUser(id, fromCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockUserService)(nil).ReadUser), id, fromCache)
}

// ReadUserByEmail mocks base method.
func (m *MockUserService) ReadUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByEmail indicates an expected call of ReadUserByEmail.
func (mr *MockUserServiceMockRecorder) ReadUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByEmail", reflect.TypeOf((*MockUserService)(nil).ReadUserByEmail), email)
}

// StoreInCache mocks base method.
func (m *MockUserService) StoreInCache(user *types.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInCache", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInCache indicates an expected call of StoreInCache.
func (mr *MockUserServiceMockRecorder) StoreInCache(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInCache", reflect.TypeOf((*MockUserService)(nil).StoreInCache), user)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(req *types.UpdateUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), req)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), id)
}

// ListAttendees mocks base method.
func (m *MockUserRepository) ListAttendees(filter *types.AttendeeFilter) ([]types.AttendeeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttendees", filter)
	ret0, _ := ret[0].([]types.AttendeeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttendees indicates an expected call of ListAttendees.
func (mr *MockUserRepositoryMockRecorder) ListAttendees(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttendees", reflect.TypeOf((*MockUserRepository)(nil).ListAttendees), filter)
}

// ReadPaginatedUsers mocks base method.
func (m *MockUserRepository) ReadPaginatedUsers(limit, offset int) ([]*types.UserInfo, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPaginatedUsers", limit, offset)
	ret0, _ := ret[0].([]*types.UserInfo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPaginatedUsers indicates an expected call of ReadPaginatedUsers.
func (mr *MockUserRepositoryMockRecorder) ReadPaginatedUsers(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPaginatedUsers", reflect.TypeOf((*MockUserRepository)(nil).ReadPaginatedUsers), limit, offset)
}

// ReadPermissionsByRole mocks base method.
func (m *MockUserRepository) ReadPermissionsByRole(roleID int) ([]*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPermissionsByRole", roleID)
	ret0, _ := ret[0].([]*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPermissionsByRole indicates an expected call of ReadPermissionsByRole.
func (mr *MockUserRepositoryMockRecorder) ReadPermissionsByRole(roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPermissionsByRole", reflect.TypeOf((*MockUserRepository)(nil).ReadPermissionsByRole), roleID)
}

// ReadUserByEmail mocks base method.
func (m *MockUserRepository) ReadUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByEmail indicates an expected call of ReadUserByEmail.
func (mr *MockUserRepositoryMockRecorder) ReadUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).ReadUserByEmail), email)
}

// ReadUserById mocks base method.
func (m *MockUserRepository) ReadUserById(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserById indicates an expected call of ReadUserById.
func (mr *MockUserRepositoryMockRecorder) ReadUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserById", reflect.TypeOf((*MockUserRepository)(nil).ReadUserById), id)
}

// ReadUsers mocks base method.
func (m *MockUserRepository) ReadUsers(id []int) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUsers", id)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUsers indicates an expected call of ReadUsers.
func (mr *MockUserRepositoryMockRecorder) ReadUsers(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUsers", reflect.TypeOf((*MockUserRepository)(nil).ReadUsers), id)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), user)
}

// UserCountByEmail mocks base method.
func (m *MockUserRepository) UserCountByEmail(email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCountByEmail", email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCountByEmail indicates an expected call of UserCountByEmail.
func (mr *MockUserRepositoryMockRecorder) UserCountByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCountByEmail", reflect.TypeOf((*MockUserRepository)(nil).UserCountByEmail), email)
}
