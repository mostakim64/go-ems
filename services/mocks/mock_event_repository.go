// Code generated by MockGen. DO NOT EDIT.
// Source: domain/event.go
//
// Generated by this command:
//
//	mockgen -source=domain/event.go -destination=services/mocks/mock_event_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/vivasoft-ltd/go-ems/models"
	types "github.com/vivasoft-ltd/go-ems/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
	isgomock struct{}
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(event *models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), event)
}

// DeleteEvent mocks base method.
func (m *MockEventRepository) DeleteEvent(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepositoryMockRecorder) DeleteEvent(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepository)(nil).DeleteEvent), id)
}

// GetAcceptedEventAttendees mocks base method.
func (m *MockEventRepository) GetAcceptedEventAttendees(eventID int) ([]models.EventAttendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcceptedEventAttendees", eventID)
	ret0, _ := ret[0].([]models.EventAttendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcceptedEventAttendees indicates an expected call of GetAcceptedEventAttendees.
func (mr *MockEventRepositoryMockRecorder) GetAcceptedEventAttendees(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcceptedEventAttendees", reflect.TypeOf((*MockEventRepository)(nil).GetAcceptedEventAttendees), eventID)
}

// GetEventAttendeesCount mocks base method.
func (m *MockEventRepository) GetEventAttendeesCount(eventID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventAttendeesCount", eventID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventAttendeesCount indicates an expected call of GetEventAttendeesCount.
func (mr *MockEventRepositoryMockRecorder) GetEventAttendeesCount(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventAttendeesCount", reflect.TypeOf((*MockEventRepository)(nil).GetEventAttendeesCount), eventID)
}

// ListEvents mocks base method.
func (m *MockEventRepository) ListEvents(filter *types.EventFilter, limit, offset int) ([]*models.Event, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", filter, limit, offset)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockEventRepositoryMockRecorder) ListEvents(filter, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventRepository)(nil).ListEvents), filter, limit, offset)
}

// ReadEventByID mocks base method.
func (m *MockEventRepository) ReadEventByID(id int) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEventByID", id)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEventByID indicates an expected call of ReadEventByID.
func (mr *MockEventRepositoryMockRecorder) ReadEventByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEventByID", reflect.TypeOf((*MockEventRepository)(nil).ReadEventByID), id)
}

// ReadEventInvitation mocks base method.
func (m *MockEventRepository) ReadEventInvitation(eventID, userID int) (*models.EventAttendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEventInvitation", eventID, userID)
	ret0, _ := ret[0].(*models.EventAttendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEventInvitation indicates an expected call of ReadEventInvitation.
func (mr *MockEventRepositoryMockRecorder) ReadEventInvitation(eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEventInvitation", reflect.TypeOf((*MockEventRepository)(nil).ReadEventInvitation), eventID, userID)
}

// UpdateEvent mocks base method.
func (m *MockEventRepository) UpdateEvent(event *models.Event) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepositoryMockRecorder) UpdateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepository)(nil).UpdateEvent), event)
}

// UpsertEventInvitation mocks base method.
func (m *MockEventRepository) UpsertEventInvitation(event *models.EventAttendee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEventInvitation", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEventInvitation indicates an expected call of UpsertEventInvitation.
func (mr *MockEventRepositoryMockRecorder) UpsertEventInvitation(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEventInvitation", reflect.TypeOf((*MockEventRepository)(nil).UpsertEventInvitation), event)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
	isgomock struct{}
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(eventReq *types.CreateEventRequest) (*types.CreateEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", eventReq)
	ret0, _ := ret[0].(*types.CreateEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(eventReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), eventReq)
}

// DeleteEvent mocks base method.
func (m *MockEventService) DeleteEvent(id int) (*types.DeleteEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", id)
	ret0, _ := ret[0].(*types.DeleteEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventServiceMockRecorder) DeleteEvent(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventService)(nil).DeleteEvent), id)
}

// ListEvents mocks base method.
func (m *MockEventService) ListEvents(req types.ListEventRequest, user *types.CurrentUser) (*types.PaginatedEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", req, user)
	ret0, _ := ret[0].(*types.PaginatedEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockEventServiceMockRecorder) ListEvents(req, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventService)(nil).ListEvents), req, user)
}

// ReadEventByID mocks base method.
func (m *MockEventService) ReadEventByID(id int) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEventByID", id)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEventByID indicates an expected call of ReadEventByID.
func (mr *MockEventServiceMockRecorder) ReadEventByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEventByID", reflect.TypeOf((*MockEventService)(nil).ReadEventByID), id)
}

// RsvpEvent mocks base method.
func (m *MockEventService) RsvpEvent(request types.RsvpEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RsvpEvent", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RsvpEvent indicates an expected call of RsvpEvent.
func (mr *MockEventServiceMockRecorder) RsvpEvent(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RsvpEvent", reflect.TypeOf((*MockEventService)(nil).RsvpEvent), request)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(eventReq *types.UpdateEventRequest) (*types.UpdateEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", eventReq)
	ret0, _ := ret[0].(*types.UpdateEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(eventReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), eventReq)
}
